var Typr = {
    parse: function (r) {
      var e = function (r, e, a, t) {
          Typr.B;
          var n = Typr.T,
            o = {
              cmap: n.cmap,
              head: n.head,
              hhea: n.hhea,
              maxp: n.maxp,
              hmtx: n.hmtx,
              name: n.name,
              'OS/2': n.OS2,
              post: n.post,
              loca: n.loca,
              kern: n.kern,
              glyf: n.glyf,
              'CFF ': n.CFF,
              'SVG ': n.SVG,
            },
            i = { _data: r, _index: e, _offset: a };
          for (var s in o) {
            var d = Typr.findTable(r, s, a);
            if (d) {
              var u = d[0],
                h = t[u];
              null == h && (h = o[s].parseTab(r, u, d[1], i)), (i[s] = t[u] = h);
            }
          }
          return i;
        },
        a = Typr.B,
        t = new Uint8Array(r),
        n = {};
      if ('ttcf' == a.readASCII(t, 0, 4)) {
        var o = 4;
        a.readUshort(t, o);
        o += 2;
        a.readUshort(t, o);
        o += 2;
        var i = a.readUint(t, o);
        o += 4;
        for (var s = [], d = 0; d < i; d++) {
          var u = a.readUint(t, o);
          (o += 4), s.push(e(t, d, u, n));
        }
        return s;
      }
      return [e(t, 0, 0, n)];
    },
    findTable: function (r, e, a) {
      for (
        var t = Typr.B, n = t.readUshort(r, a + 4), o = a + 12, i = 0;
        i < n;
        i++
      ) {
        var s = t.readASCII(r, o, 4),
          d = (t.readUint(r, o + 4), t.readUint(r, o + 8)),
          u = t.readUint(r, o + 12);
        if (s == e) return [d, u];
        o += 16;
      }
      return null;
    },
    T: {},
  };
  (Typr.B = {
    readFixed: function (r, e) {
      return ((r[e] << 8) | r[e + 1]) + ((r[e + 2] << 8) | r[e + 3]) / 65540;
    },
    readF2dot14: function (r, e) {
      return Typr.B.readShort(r, e) / 16384;
    },
    readInt: function (r, e) {
      var a = Typr.B.t.uint8;
      return (
        (a[0] = r[e + 3]),
        (a[1] = r[e + 2]),
        (a[2] = r[e + 1]),
        (a[3] = r[e]),
        Typr.B.t.int32[0]
      );
    },
    readInt8: function (r, e) {
      return (Typr.B.t.uint8[0] = r[e]), Typr.B.t.int8[0];
    },
    readShort: function (r, e) {
      var a = Typr.B.t.uint8;
      return (a[1] = r[e]), (a[0] = r[e + 1]), Typr.B.t.int16[0];
    },
    readUshort: function (r, e) {
      return (r[e] << 8) | r[e + 1];
    },
    writeUshort: function (r, e, a) {
      (r[e] = (a >> 8) & 255), (r[e + 1] = 255 & a);
    },
    readUshorts: function (r, e, a) {
      for (var t = [], n = 0; n < a; n++) {
        var o = Typr.B.readUshort(r, e + 2 * n);
        t.push(o);
      }
      return t;
    },
    readUint: function (r, e) {
      var a = Typr.B.t.uint8;
      return (
        (a[3] = r[e]),
        (a[2] = r[e + 1]),
        (a[1] = r[e + 2]),
        (a[0] = r[e + 3]),
        Typr.B.t.uint32[0]
      );
    },
    writeUint: function (r, e, a) {
      (r[e] = (a >> 24) & 255),
        (r[e + 1] = (a >> 16) & 255),
        (r[e + 2] = (a >> 8) & 255),
        (r[e + 3] = (a >> 0) & 255);
    },
    readUint64: function (r, e) {
      return 4294967296 * Typr.B.readUint(r, e) + Typr.B.readUint(r, e + 4);
    },
    readASCII: function (r, e, a) {
      for (var t = '', n = 0; n < a; n++) t += String.fromCharCode(r[e + n]);
      return t;
    },
    writeASCII: function (r, e, a) {
      for (var t = 0; t < a.length; t++) r[e + t] = a.charCodeAt(t);
    },
    readUnicode: function (r, e, a) {
      for (var t = '', n = 0; n < a; n++) {
        var o = (r[e++] << 8) | r[e++];
        t += String.fromCharCode(o);
      }
      return t;
    },
    _tdec: window.TextDecoder ? new window.TextDecoder() : null,
    readUTF8: function (r, e, a) {
      var t = Typr.B._tdec;
      return t && 0 == e && a == r.length
        ? t.decode(r)
        : Typr.B.readASCII(r, e, a);
    },
    readBytes: function (r, e, a) {
      for (var t = [], n = 0; n < a; n++) t.push(r[e + n]);
      return t;
    },
    readASCIIArray: function (r, e, a) {
      for (var t = [], n = 0; n < a; n++) t.push(String.fromCharCode(r[e + n]));
      return t;
    },
    t: (function () {
      var r = new ArrayBuffer(8);
      return {
        buff: r,
        int8: new Int8Array(r),
        uint8: new Uint8Array(r),
        int16: new Int16Array(r),
        uint16: new Uint16Array(r),
        int32: new Int32Array(r),
        uint32: new Uint32Array(r),
      };
    })(),
  }),
    (Typr.T.CFF = {
      parseTab: function (r, e, a) {
        var t = Typr.B,
          n = Typr.T.CFF;
        (r = new Uint8Array(r.buffer, e, a))[(e = 0)], r[++e], r[++e], r[++e];
        e++;
        var o = [];
        e = n.readIndex(r, e, o);
        for (var i = [], s = 0; s < o.length - 1; s++)
          i.push(t.readASCII(r, e + o[s], o[s + 1] - o[s]));
        e += o[o.length - 1];
        var d = [];
        e = n.readIndex(r, e, d);
        var u = [];
        for (s = 0; s < d.length - 1; s++)
          u.push(n.readDict(r, e + d[s], e + d[s + 1]));
        e += d[d.length - 1];
        var h = u[0],
          p = [];
        e = n.readIndex(r, e, p);
        var f = [];
        for (s = 0; s < p.length - 1; s++)
          f.push(t.readASCII(r, e + p[s], p[s + 1] - p[s]));
        if (
          ((e += p[p.length - 1]),
          n.readSubrs(r, e, h),
          h.CharStrings && (h.CharStrings = n.readBytes(r, h.CharStrings)),
          h.ROS)
        ) {
          e = h.FDArray;
          var l = [];
          (e = n.readIndex(r, e, l)), (h.FDArray = []);
          for (s = 0; s < l.length - 1; s++) {
            var v = n.readDict(r, e + l[s], e + l[s + 1]);
            n._readFDict(r, v, f), h.FDArray.push(v);
          }
          (e += l[l.length - 1]), (e = h.FDSelect), (h.FDSelect = []);
          var y = r[e];
          if ((e++, 3 != y)) throw y;
          var c = t.readUshort(r, e);
          e += 2;
          for (s = 0; s < c + 1; s++)
            h.FDSelect.push(t.readUshort(r, e), r[e + 2]), (e += 3);
        }
        return (
          h.charset &&
            (h.charset = n.readCharset(r, h.charset, h.CharStrings.length)),
          n._readFDict(r, h, f),
          h
        );
      },
      _readFDict: function (r, e, a) {
        var t,
          n = Typr.T.CFF;
        for (var o in (e.Private &&
          ((t = e.Private[1]),
          (e.Private = n.readDict(r, t, t + e.Private[0])),
          e.Private.Subrs && n.readSubrs(r, t + e.Private.Subrs, e.Private)),
        e))
          -1 !=
            [
              'FamilyName',
              'FontName',
              'FullName',
              'Notice',
              'version',
              'Copyright',
            ].indexOf(o) && (e[o] = a[e[o] - 426 + 35]);
      },
      readSubrs: function (r, e, a) {
        a.Subrs = Typr.T.CFF.readBytes(r, e);
        var t,
          n = a.Subrs.length + 1;
        (t = n < 1240 ? 107 : n < 33900 ? 1131 : 32768), (a.Bias = t);
      },
      readBytes: function (r, e) {
        Typr.B;
        var a = [];
        e = Typr.T.CFF.readIndex(r, e, a);
        for (
          var t = [], n = a.length - 1, o = r.byteOffset + e, i = 0;
          i < n;
          i++
        ) {
          var s = a[i];
          t.push(new Uint8Array(r.buffer, o + s, a[i + 1] - s));
        }
        return t;
      },
      tableSE: [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
        88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98,
        99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112,
        113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125,
        126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141,
        142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0,
        0, 0, 0,
      ],
      glyphByUnicode: function (r, e) {
        for (var a = 0; a < r.charset.length; a++)
          if (r.charset[a] == e) return a;
        return -1;
      },
      glyphBySE: function (r, e) {
        return e < 0 || e > 255
          ? -1
          : Typr.T.CFF.glyphByUnicode(r, Typr.T.CFF.tableSE[e]);
      },
      readCharset: function (r, e, a) {
        var t = Typr.B,
          n = ['.notdef'],
          o = r[e];
        if ((e++, 0 == o))
          for (var i = 0; i < a; i++) {
            var s = t.readUshort(r, e);
            (e += 2), n.push(s);
          }
        else {
          if (1 != o && 2 != o) throw 'error: format: ' + o;
          for (; n.length < a; ) {
            s = t.readUshort(r, e);
            e += 2;
            var d = 0;
            1 == o ? ((d = r[e]), e++) : ((d = t.readUshort(r, e)), (e += 2));
            for (i = 0; i <= d; i++) n.push(s), s++;
          }
        }
        return n;
      },
      readIndex: function (r, e, a) {
        var t = Typr.B,
          n = t.readUshort(r, e) + 1,
          o = r[(e += 2)];
        if ((e++, 1 == o)) for (var i = 0; i < n; i++) a.push(r[e + i]);
        else if (2 == o)
          for (i = 0; i < n; i++) a.push(t.readUshort(r, e + 2 * i));
        else if (3 == o)
          for (i = 0; i < n; i++) a.push(16777215 & t.readUint(r, e + 3 * i - 1));
        else if (4 == o) for (i = 0; i < n; i++) a.push(t.readUint(r, e + 4 * i));
        else if (1 != n) throw 'unsupported offset size: ' + o + ', count: ' + n;
        return (e += n * o) - 1;
      },
      getCharString: function (r, e, a) {
        var t = Typr.B,
          n = r[e],
          o = r[e + 1],
          i = (r[e + 2], r[e + 3], r[e + 4], 1),
          s = null,
          d = null;
        n <= 20 && ((s = n), (i = 1)),
          12 == n && ((s = 100 * n + o), (i = 2)),
          21 <= n && n <= 27 && ((s = n), (i = 1)),
          28 == n && ((d = t.readShort(r, e + 1)), (i = 3)),
          29 <= n && n <= 31 && ((s = n), (i = 1)),
          32 <= n && n <= 246 && ((d = n - 139), (i = 1)),
          247 <= n && n <= 250 && ((d = 256 * (n - 247) + o + 108), (i = 2)),
          251 <= n && n <= 254 && ((d = 256 * -(n - 251) - o - 108), (i = 2)),
          255 == n && ((d = t.readInt(r, e + 1) / 65535), (i = 5)),
          (a.val = null != d ? d : 'o' + s),
          (a.size = i);
      },
      readCharString: function (r, e, a) {
        for (var t = e + a, n = Typr.B, o = []; e < t; ) {
          var i = r[e],
            s = r[e + 1],
            d = (r[e + 2], r[e + 3], r[e + 4], 1),
            u = null,
            h = null;
          i <= 20 && ((u = i), (d = 1)),
            12 == i && ((u = 100 * i + s), (d = 2)),
            (19 != i && 20 != i) || ((u = i), (d = 2)),
            21 <= i && i <= 27 && ((u = i), (d = 1)),
            28 == i && ((h = n.readShort(r, e + 1)), (d = 3)),
            29 <= i && i <= 31 && ((u = i), (d = 1)),
            32 <= i && i <= 246 && ((h = i - 139), (d = 1)),
            247 <= i && i <= 250 && ((h = 256 * (i - 247) + s + 108), (d = 2)),
            251 <= i && i <= 254 && ((h = 256 * -(i - 251) - s - 108), (d = 2)),
            255 == i && ((h = n.readInt(r, e + 1) / 65535), (d = 5)),
            o.push(null != h ? h : 'o' + u),
            (e += d);
        }
        return o;
      },
      readDict: function (r, e, a) {
        for (var t = Typr.B, n = {}, o = []; e < a; ) {
          var i = r[e],
            s = r[e + 1],
            d = (r[e + 2], r[e + 3], r[e + 4], 1),
            u = null,
            h = null;
          if (
            (28 == i && ((h = t.readShort(r, e + 1)), (d = 3)),
            29 == i && ((h = t.readInt(r, e + 1)), (d = 5)),
            32 <= i && i <= 246 && ((h = i - 139), (d = 1)),
            247 <= i && i <= 250 && ((h = 256 * (i - 247) + s + 108), (d = 2)),
            251 <= i && i <= 254 && ((h = 256 * -(i - 251) - s - 108), (d = 2)),
            255 == i)
          )
            throw ((h = t.readInt(r, e + 1) / 65535), (d = 5), 'unknown number');
          if (30 == i) {
            var p = [];
            for (d = 1; ; ) {
              var f = r[e + d];
              d++;
              var l = f >> 4,
                v = 15 & f;
              if ((15 != l && p.push(l), 15 != v && p.push(v), 15 == v)) break;
            }
            for (
              var y = '',
                c = [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  '.',
                  'e',
                  'e-',
                  'reserved',
                  '-',
                  'endOfNumber',
                ],
                S = 0;
              S < p.length;
              S++
            )
              y += c[p[S]];
            h = parseFloat(y);
          }
          if (i <= 21)
            if (
              ((u = [
                'version',
                'Notice',
                'FullName',
                'FamilyName',
                'Weight',
                'FontBBox',
                'BlueValues',
                'OtherBlues',
                'FamilyBlues',
                'FamilyOtherBlues',
                'StdHW',
                'StdVW',
                'escape',
                'UniqueID',
                'XUID',
                'charset',
                'Encoding',
                'CharStrings',
                'Private',
                'Subrs',
                'defaultWidthX',
                'nominalWidthX',
              ][i]),
              (d = 1),
              12 == i)
            )
              (u = [
                'Copyright',
                'isFixedPitch',
                'ItalicAngle',
                'UnderlinePosition',
                'UnderlineThickness',
                'PaintType',
                'CharstringType',
                'FontMatrix',
                'StrokeWidth',
                'BlueScale',
                'BlueShift',
                'BlueFuzz',
                'StemSnapH',
                'StemSnapV',
                'ForceBold',
                '',
                '',
                'LanguageGroup',
                'ExpansionFactor',
                'initialRandomSeed',
                'SyntheticBase',
                'PostScript',
                'BaseFontName',
                'BaseFontBlend',
                '',
                '',
                '',
                '',
                '',
                '',
                'ROS',
                'CIDFontVersion',
                'CIDFontRevision',
                'CIDFontType',
                'CIDCount',
                'UIDBase',
                'FDArray',
                'FDSelect',
                'FontName',
              ][s]),
                (d = 2);
          null != u ? ((n[u] = 1 == o.length ? o[0] : o), (o = [])) : o.push(h),
            (e += d);
        }
        return n;
      },
    }),
    (Typr.T.cmap = {
      parseTab: function (r, e, a) {
        var t = { tables: [], ids: {}, off: e };
        r = new Uint8Array(r.buffer, e, a);
        e = 0;
        var n = Typr.B,
          o = n.readUshort,
          i = Typr.T.cmap,
          s = (o(r, e), o(r, (e += 2)));
        e += 2;
        for (var d = [], u = 0; u < s; u++) {
          var h = o(r, e),
            p = o(r, (e += 2));
          e += 2;
          var f = n.readUint(r, e);
          e += 4;
          var l = 'p' + h + 'e' + p,
            v = d.indexOf(f);
          if (-1 == v) {
            v = t.tables.length;
            var y = {};
            d.push(f);
            var c = (y.format = o(r, f));
            0 == c
              ? (y = i.parse0(r, f, y))
              : 4 == c
              ? (y = i.parse4(r, f, y))
              : 6 == c
              ? (y = i.parse6(r, f, y))
              : 12 == c && (y = i.parse12(r, f, y)),
              t.tables.push(y);
          }
          if (null != t.ids[l]) throw 'multiple tables for one platform+encoding';
          t.ids[l] = v;
        }
        return t;
      },
      parse0: function (r, e, a) {
        var t = Typr.B;
        e += 2;
        var n = t.readUshort(r, e);
        e += 2;
        t.readUshort(r, e);
        (e += 2), (a.map = []);
        for (var o = 0; o < n - 6; o++) a.map.push(r[e + o]);
        return a;
      },
      parse4: function (r, e, a) {
        var t = Typr.B,
          n = t.readUshort,
          o = t.readUshorts,
          i = e,
          s = n(r, (e += 2)),
          d = (n(r, (e += 2)), n(r, (e += 2)));
        e += 2;
        var u = d >>> 1;
        (a.searchRange = n(r, e)),
          (e += 2),
          (a.entrySelector = n(r, e)),
          (e += 2),
          (a.rangeShift = n(r, e)),
          (e += 2),
          (a.endCount = o(r, e, u)),
          (e += 2 * u),
          (e += 2),
          (a.startCount = o(r, e, u)),
          (e += 2 * u),
          (a.idDelta = []);
        for (var h = 0; h < u; h++) a.idDelta.push(t.readShort(r, e)), (e += 2);
        return (
          (a.idRangeOffset = o(r, e, u)),
          (e += 2 * u),
          (a.glyphIdArray = o(r, e, (i + s - e) >>> 1)),
          a
        );
      },
      parse6: function (r, e, a) {
        var t = Typr.B;
        e += 2;
        t.readUshort(r, e);
        e += 2;
        t.readUshort(r, e);
        (e += 2), (a.firstCode = t.readUshort(r, e)), (e += 2);
        var n = t.readUshort(r, e);
        (e += 2), (a.glyphIdArray = []);
        for (var o = 0; o < n; o++)
          a.glyphIdArray.push(t.readUshort(r, e)), (e += 2);
        return a;
      },
      parse12: function (r, e, a) {
        var t = Typr.B.readUint,
          n = (t(r, (e += 4)), t(r, (e += 4)), 3 * t(r, (e += 4)));
        e += 4;
        for (var o = (a.groups = new Uint32Array(n)), i = 0; i < n; i += 3)
          (o[i] = t(r, e + (i << 2))),
            (o[i + 1] = t(r, e + (i << 2) + 4)),
            (o[i + 2] = t(r, e + (i << 2) + 8));
        return a;
      },
    }),
    (Typr.T.glyf = {
      parseTab: function (r, e, a, t) {
        for (var n = [], o = t.maxp.numGlyphs, i = 0; i < o; i++) n.push(null);
        return n;
      },
      _parseGlyf: function (r, e) {
        var a = Typr.B,
          t = r._data,
          n = r.loca;
        if (n[e] == n[e + 1]) return null;
        var o = Typr.findTable(t, 'glyf', r._offset)[0] + n[e],
          i = {};
        if (
          ((i.noc = a.readShort(t, o)),
          (o += 2),
          (i.xMin = a.readShort(t, o)),
          (o += 2),
          (i.yMin = a.readShort(t, o)),
          (o += 2),
          (i.xMax = a.readShort(t, o)),
          (o += 2),
          (i.yMax = a.readShort(t, o)),
          (o += 2),
          i.xMin >= i.xMax || i.yMin >= i.yMax)
        )
          return null;
        if (i.noc > 0) {
          i.endPts = [];
          for (var s = 0; s < i.noc; s++)
            i.endPts.push(a.readUshort(t, o)), (o += 2);
          var d = a.readUshort(t, o);
          if (((o += 2), t.length - o < d)) return null;
          (i.instructions = a.readBytes(t, o, d)), (o += d);
          var u = i.endPts[i.noc - 1] + 1;
          i.flags = [];
          for (s = 0; s < u; s++) {
            var h = t[o];
            if ((o++, i.flags.push(h), 0 != (8 & h))) {
              var p = t[o];
              o++;
              for (var f = 0; f < p; f++) i.flags.push(h), s++;
            }
          }
          i.xs = [];
          for (s = 0; s < u; s++) {
            var l = 0 != (2 & i.flags[s]),
              v = 0 != (16 & i.flags[s]);
            l
              ? (i.xs.push(v ? t[o] : -t[o]), o++)
              : v
              ? i.xs.push(0)
              : (i.xs.push(a.readShort(t, o)), (o += 2));
          }
          i.ys = [];
          for (s = 0; s < u; s++) {
            (l = 0 != (4 & i.flags[s])), (v = 0 != (32 & i.flags[s]));
            l
              ? (i.ys.push(v ? t[o] : -t[o]), o++)
              : v
              ? i.ys.push(0)
              : (i.ys.push(a.readShort(t, o)), (o += 2));
          }
          var y = 0,
            c = 0;
          for (s = 0; s < u; s++)
            (y += i.xs[s]), (c += i.ys[s]), (i.xs[s] = y), (i.ys[s] = c);
        } else {
          var S;
          i.parts = [];
          do {
            (S = a.readUshort(t, o)), (o += 2);
            var T = {
              m: { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 },
              p1: -1,
              p2: -1,
            };
            if (
              (i.parts.push(T),
              (T.glyphIndex = a.readUshort(t, o)),
              (o += 2),
              1 & S)
            ) {
              var U = a.readShort(t, o);
              o += 2;
              var g = a.readShort(t, o);
              o += 2;
            } else {
              U = a.readInt8(t, o);
              o++;
              g = a.readInt8(t, o);
              o++;
            }
            2 & S ? ((T.m.tx = U), (T.m.ty = g)) : ((T.p1 = U), (T.p2 = g)),
              8 & S
                ? ((T.m.a = T.m.d = a.readF2dot14(t, o)), (o += 2))
                : 64 & S
                ? ((T.m.a = a.readF2dot14(t, o)),
                  (o += 2),
                  (T.m.d = a.readF2dot14(t, o)),
                  (o += 2))
                : 128 & S &&
                  ((T.m.a = a.readF2dot14(t, o)),
                  (o += 2),
                  (T.m.b = a.readF2dot14(t, o)),
                  (o += 2),
                  (T.m.c = a.readF2dot14(t, o)),
                  (o += 2),
                  (T.m.d = a.readF2dot14(t, o)),
                  (o += 2));
          } while (32 & S);
          if (256 & S) {
            var m = a.readUshort(t, o);
            (o += 2), (i.instr = []);
            for (s = 0; s < m; s++) i.instr.push(t[o]), o++;
          }
        }
        return i;
      },
    }),
    (Typr.T.head = {
      parseTab: function (r, e, a) {
        var t = Typr.B,
          n = {};
        t.readFixed(r, e);
        (e += 4), (n.fontRevision = t.readFixed(r, e)), (e += 4);
        t.readUint(r, e);
        e += 4;
        t.readUint(r, e);
        return (
          (e += 4),
          (n.flags = t.readUshort(r, e)),
          (e += 2),
          (n.unitsPerEm = t.readUshort(r, e)),
          (e += 2),
          (n.created = t.readUint64(r, e)),
          (e += 8),
          (n.modified = t.readUint64(r, e)),
          (e += 8),
          (n.xMin = t.readShort(r, e)),
          (e += 2),
          (n.yMin = t.readShort(r, e)),
          (e += 2),
          (n.xMax = t.readShort(r, e)),
          (e += 2),
          (n.yMax = t.readShort(r, e)),
          (e += 2),
          (n.macStyle = t.readUshort(r, e)),
          (e += 2),
          (n.lowestRecPPEM = t.readUshort(r, e)),
          (e += 2),
          (n.fontDirectionHint = t.readShort(r, e)),
          (e += 2),
          (n.indexToLocFormat = t.readShort(r, e)),
          (e += 2),
          (n.glyphDataFormat = t.readShort(r, e)),
          (e += 2),
          n
        );
      },
    }),
    (Typr.T.hhea = {
      parseTab: function (r, e, a) {
        var t = Typr.B,
          n = {};
        t.readFixed(r, e);
        e += 4;
        for (
          var o = [
              'ascender',
              'descender',
              'lineGap',
              'advanceWidthMax',
              'minLeftSideBearing',
              'minRightSideBearing',
              'xMaxExtent',
              'caretSlopeRise',
              'caretSlopeRun',
              'caretOffset',
              'res0',
              'res1',
              'res2',
              'res3',
              'metricDataFormat',
              'numberOfHMetrics',
            ],
            i = 0;
          i < o.length;
          i++
        ) {
          var s = o[i],
            d =
              'advanceWidthMax' == s || 'numberOfHMetrics' == s
                ? t.readUshort
                : t.readShort;
          n[s] = d(r, e + 2 * i);
        }
        return n;
      },
    }),
    (Typr.T.hmtx = {
      parseTab: function (r, e, a, t) {
        for (
          var n = Typr.B,
            o = [],
            i = [],
            s = t.maxp.numGlyphs,
            d = t.hhea.numberOfHMetrics,
            u = 0,
            h = 0,
            p = 0;
          p < d;
  
        )
          (u = n.readUshort(r, e + (p << 2))),
            (h = n.readShort(r, e + (p << 2) + 2)),
            o.push(u),
            i.push(h),
            p++;
        for (; p < s; ) o.push(u), i.push(h), p++;
        return { aWidth: o, lsBearing: i };
      },
    }),
    (Typr.T.kern = {
      parseTab: function (r, e, a, t) {
        var n = Typr.B,
          o = Typr.T.kern;
        if (1 == n.readUshort(r, e)) return o.parseV1(r, e, a, t);
        var i = n.readUshort(r, e + 2);
        e += 4;
        for (var s = { glyph1: [], rval: [] }, d = 0; d < i; d++) {
          e += 2;
          a = n.readUshort(r, e);
          e += 2;
          var u = n.readUshort(r, e);
          e += 2;
          var h = u >>> 8;
          0 == (h &= 15) && (e = o.readFormat0(r, e, s));
        }
        return s;
      },
      parseV1: function (r, e, a, t) {
        var n = Typr.B,
          o = Typr.T.kern,
          i = (n.readFixed(r, e), n.readUint(r, e + 4));
        e += 8;
        for (var s = { glyph1: [], rval: [] }, d = 0; d < i; d++) {
          n.readUint(r, e);
          e += 4;
          var u = n.readUshort(r, e);
          e += 2;
          n.readUshort(r, e);
          (e += 2), 0 == (255 & u) && (e = o.readFormat0(r, e, s));
        }
        return s;
      },
      readFormat0: function (r, e, a) {
        var t = Typr.B,
          n = t.readUshort,
          o = -1,
          i = n(r, e);
        n(r, e + 2), n(r, e + 4), n(r, e + 6);
        e += 8;
        for (var s = 0; s < i; s++) {
          var d = n(r, e),
            u = n(r, (e += 2));
          e += 2;
          var h = t.readShort(r, e);
          (e += 2),
            d != o && (a.glyph1.push(d), a.rval.push({ glyph2: [], vals: [] }));
          var p = a.rval[a.rval.length - 1];
          p.glyph2.push(u), p.vals.push(h), (o = d);
        }
        return e;
      },
    }),
    (Typr.T.loca = {
      parseTab: function (r, e, a, t) {
        var n = Typr.B,
          o = [],
          i = t.head.indexToLocFormat,
          s = t.maxp.numGlyphs + 1;
        if (0 == i)
          for (var d = 0; d < s; d++) o.push(n.readUshort(r, e + (d << 1)) << 1);
        if (1 == i) for (d = 0; d < s; d++) o.push(n.readUint(r, e + (d << 2)));
        return o;
      },
    }),
    (Typr.T.maxp = {
      parseTab: function (r, e, a) {
        var t = Typr.B,
          n = t.readUshort,
          o = {};
        t.readUint(r, e);
        return (e += 4), (o.numGlyphs = n(r, e)), (e += 2), o;
      },
    }),
    (Typr.T.name = {
      parseTab: function (r, e, a) {
        var t = Typr.B,
          n = {};
        t.readUshort(r, e);
        e += 2;
        var o = t.readUshort(r, e);
        e += 2;
        t.readUshort(r, e);
        for (
          var i = [
              'copyright',
              'fontFamily',
              'fontSubfamily',
              'ID',
              'fullName',
              'version',
              'postScriptName',
              'trademark',
              'manufacturer',
              'designer',
              'description',
              'urlVendor',
              'urlDesigner',
              'licence',
              'licenceURL',
              '---',
              'typoFamilyName',
              'typoSubfamilyName',
              'compatibleFull',
              'sampleText',
              'postScriptCID',
              'wwsFamilyName',
              'wwsSubfamilyName',
              'lightPalette',
              'darkPalette',
            ],
            s = (e += 2),
            d = t.readUshort,
            u = 0;
          u < o;
          u++
        ) {
          var h = d(r, e),
            p = d(r, (e += 2)),
            f = d(r, (e += 2)),
            l = d(r, (e += 2)),
            v = d(r, (e += 2)),
            y = d(r, (e += 2));
          e += 2;
          var c,
            S = s + 12 * o + y;
          0 == h || (3 == h && 0 == p)
            ? (c = t.readUnicode(r, S, v / 2))
            : 0 == p
            ? (c = t.readASCII(r, S, v))
            : 1 == p || 3 == p || 4 == p || 10 == p
            ? (c = t.readUnicode(r, S, v / 2))
            : 1 == h
            ? ((c = t.readASCII(r, S, v)),
              console.log('reading unknown MAC encoding ' + p + ' as ASCII'))
            : (console.log('unknown encoding ' + p + ', platformID: ' + h),
              (c = t.readASCII(r, S, v)));
          var T = 'p' + h + ',' + f.toString(16);
          null == n[T] && (n[T] = {}), (n[T][i[l]] = c), (n[T]._lang = f);
        }
        var U,
          g = 'postScriptName';
        for (var m in n) if (null != n[m][g] && 1033 == n[m]._lang) return n[m];
        for (var m in n) if (null != n[m][g] && 0 == n[m]._lang) return n[m];
        for (var m in n) if (null != n[m][g] && 3084 == n[m]._lang) return n[m];
        for (var m in n) if (null != n[m][g]) return n[m];
        for (var m in n) {
          U = n[m];
          break;
        }
        return (
          console.log('returning name table with languageID ' + U._lang),
          null == U[g] && null != U.ID && (U[g] = U.ID),
          U
        );
      },
    }),
    (Typr.T.OS2 = {
      parseTab: function (r, e, a) {
        var t = Typr.B.readUshort(r, e);
        e += 2;
        var n = Typr.T.OS2,
          o = {};
        if (0 == t) n.version0(r, e, o);
        else if (1 == t) n.version1(r, e, o);
        else if (2 == t || 3 == t || 4 == t) n.version2(r, e, o);
        else {
          if (5 != t) throw 'unknown OS/2 table version: ' + t;
          n.version5(r, e, o);
        }
        return o;
      },
      version0: function (r, e, a) {
        var t = Typr.B;
        return (
          (a.xAvgCharWidth = t.readShort(r, e)),
          (e += 2),
          (a.usWeightClass = t.readUshort(r, e)),
          (e += 2),
          (a.usWidthClass = t.readUshort(r, e)),
          (e += 2),
          (a.fsType = t.readUshort(r, e)),
          (e += 2),
          (a.ySubscriptXSize = t.readShort(r, e)),
          (e += 2),
          (a.ySubscriptYSize = t.readShort(r, e)),
          (e += 2),
          (a.ySubscriptXOffset = t.readShort(r, e)),
          (e += 2),
          (a.ySubscriptYOffset = t.readShort(r, e)),
          (e += 2),
          (a.ySuperscriptXSize = t.readShort(r, e)),
          (e += 2),
          (a.ySuperscriptYSize = t.readShort(r, e)),
          (e += 2),
          (a.ySuperscriptXOffset = t.readShort(r, e)),
          (e += 2),
          (a.ySuperscriptYOffset = t.readShort(r, e)),
          (e += 2),
          (a.yStrikeoutSize = t.readShort(r, e)),
          (e += 2),
          (a.yStrikeoutPosition = t.readShort(r, e)),
          (e += 2),
          (a.sFamilyClass = t.readShort(r, e)),
          (e += 2),
          (a.panose = t.readBytes(r, e, 10)),
          (e += 10),
          (a.ulUnicodeRange1 = t.readUint(r, e)),
          (e += 4),
          (a.ulUnicodeRange2 = t.readUint(r, e)),
          (e += 4),
          (a.ulUnicodeRange3 = t.readUint(r, e)),
          (e += 4),
          (a.ulUnicodeRange4 = t.readUint(r, e)),
          (e += 4),
          (a.achVendID = t.readASCII(r, e, 4)),
          (e += 4),
          (a.fsSelection = t.readUshort(r, e)),
          (e += 2),
          (a.usFirstCharIndex = t.readUshort(r, e)),
          (e += 2),
          (a.usLastCharIndex = t.readUshort(r, e)),
          (e += 2),
          (a.sTypoAscender = t.readShort(r, e)),
          (e += 2),
          (a.sTypoDescender = t.readShort(r, e)),
          (e += 2),
          (a.sTypoLineGap = t.readShort(r, e)),
          (e += 2),
          (a.usWinAscent = t.readUshort(r, e)),
          (e += 2),
          (a.usWinDescent = t.readUshort(r, e)),
          (e += 2)
        );
      },
      version1: function (r, e, a) {
        var t = Typr.B;
        return (
          (e = Typr.T.OS2.version0(r, e, a)),
          (a.ulCodePageRange1 = t.readUint(r, e)),
          (e += 4),
          (a.ulCodePageRange2 = t.readUint(r, e)),
          (e += 4)
        );
      },
      version2: function (r, e, a) {
        var t = Typr.B,
          n = t.readUshort;
        return (
          (e = Typr.T.OS2.version1(r, e, a)),
          (a.sxHeight = t.readShort(r, e)),
          (e += 2),
          (a.sCapHeight = t.readShort(r, e)),
          (e += 2),
          (a.usDefault = n(r, e)),
          (e += 2),
          (a.usBreak = n(r, e)),
          (e += 2),
          (a.usMaxContext = n(r, e)),
          (e += 2)
        );
      },
      version5: function (r, e, a) {
        var t = Typr.B.readUshort;
        return (
          (e = Typr.T.OS2.version2(r, e, a)),
          (a.usLowerOpticalPointSize = t(r, e)),
          (e += 2),
          (a.usUpperOpticalPointSize = t(r, e)),
          (e += 2)
        );
      },
    }),
    (Typr.T.post = {
      parseTab: function (r, e, a) {
        var t = Typr.B,
          n = {};
        return (
          (n.version = t.readFixed(r, e)),
          (e += 4),
          (n.italicAngle = t.readFixed(r, e)),
          (e += 4),
          (n.underlinePosition = t.readShort(r, e)),
          (e += 2),
          (n.underlineThickness = t.readShort(r, e)),
          (e += 2),
          n
        );
      },
    }),
    (Typr.T.SVG = {
      parseTab: function (r, e, a) {
        var t = Typr.B,
          n = { entries: [] },
          o = e;
        t.readUshort(r, e);
        e += 2;
        var i = t.readUint(r, e);
        e += 4;
        t.readUint(r, e);
        (e += 4), (e = i + o);
        var s = t.readUshort(r, e);
        e += 2;
        for (var d = 0; d < s; d++) {
          var u = t.readUshort(r, e);
          e += 2;
          var h = t.readUshort(r, e);
          e += 2;
          var p = t.readUint(r, e);
          e += 4;
          var f = t.readUint(r, e);
          e += 4;
          for (
            var l = new Uint8Array(r.buffer, o + p + i, f),
              v = t.readUTF8(l, 0, l.length),
              y = u;
            y <= h;
            y++
          )
            n.entries[y] = v;
        }
        return n;
      },
    });
  